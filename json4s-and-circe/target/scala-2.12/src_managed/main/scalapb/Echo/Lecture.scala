// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package Echo

@SerialVersionUID(0L)
final case class Lecture(
    courseName: _root_.scala.Predef.String = "",
    coursePrice: _root_.scala.Int = 0,
    courseStudents: _root_.scala.Seq[Echo.Student] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Lecture] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = courseName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = coursePrice
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      courseStudents.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = courseName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = coursePrice
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      courseStudents.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withCourseName(__v: _root_.scala.Predef.String): Lecture = copy(courseName = __v)
    def withCoursePrice(__v: _root_.scala.Int): Lecture = copy(coursePrice = __v)
    def clearCourseStudents = copy(courseStudents = _root_.scala.Seq.empty)
    def addCourseStudents(__vs: Echo.Student *): Lecture = addAllCourseStudents(__vs)
    def addAllCourseStudents(__vs: Iterable[Echo.Student]): Lecture = copy(courseStudents = courseStudents ++ __vs)
    def withCourseStudents(__v: _root_.scala.Seq[Echo.Student]): Lecture = copy(courseStudents = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = courseName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = coursePrice
          if (__t != 0) __t else null
        }
        case 3 => courseStudents
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(courseName)
        case 2 => _root_.scalapb.descriptors.PInt(coursePrice)
        case 3 => _root_.scalapb.descriptors.PRepeated(courseStudents.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: Echo.Lecture.type = Echo.Lecture
    // @@protoc_insertion_point(GeneratedMessage[Lecture])
}

object Lecture extends scalapb.GeneratedMessageCompanion[Echo.Lecture] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[Echo.Lecture] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Echo.Lecture = {
    var __courseName: _root_.scala.Predef.String = ""
    var __coursePrice: _root_.scala.Int = 0
    val __courseStudents: _root_.scala.collection.immutable.VectorBuilder[Echo.Student] = new _root_.scala.collection.immutable.VectorBuilder[Echo.Student]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __courseName = _input__.readStringRequireUtf8()
        case 16 =>
          __coursePrice = _input__.readInt32()
        case 26 =>
          __courseStudents += _root_.scalapb.LiteParser.readMessage[Echo.Student](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    Echo.Lecture(
        courseName = __courseName,
        coursePrice = __coursePrice,
        courseStudents = __courseStudents.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Echo.Lecture] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      Echo.Lecture(
        courseName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        coursePrice = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        courseStudents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[Echo.Student]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EchoProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EchoProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = Echo.Student
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = Echo.Lecture(
    courseName = "",
    coursePrice = 0,
    courseStudents = _root_.scala.Seq.empty
  )
  implicit class LectureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, Echo.Lecture]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, Echo.Lecture](_l) {
    def courseName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.courseName)((c_, f_) => c_.copy(courseName = f_))
    def coursePrice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.coursePrice)((c_, f_) => c_.copy(coursePrice = f_))
    def courseStudents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[Echo.Student]] = field(_.courseStudents)((c_, f_) => c_.copy(courseStudents = f_))
  }
  final val COURSE_NAME_FIELD_NUMBER = 1
  final val COURSE_PRICE_FIELD_NUMBER = 2
  final val COURSE_STUDENTS_FIELD_NUMBER = 3
  def of(
    courseName: _root_.scala.Predef.String,
    coursePrice: _root_.scala.Int,
    courseStudents: _root_.scala.Seq[Echo.Student]
  ): _root_.Echo.Lecture = _root_.Echo.Lecture(
    courseName,
    coursePrice,
    courseStudents
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[Lecture])
}
